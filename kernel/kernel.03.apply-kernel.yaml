# This playbook will apply the kernel built using the initial step kernel.01.build-kernel-locally-with-updated-config.yaml
#
# kernel.01... requires that the kernel is built locally outside the ansible-script, once that's done, 
#   and kernel.01... is re-run to copy the debs to the machines.
#
---
- name: Apply kernel with vxlan and sysfs_btf
  hosts: all
  become: True
  gather_facts: True

  tasks:

  - name: run dpkg -i linux-image
    ansible.builtin.shell:
      chdir: /tmp/kernels
      cmd: dpkg -i linux-image_arm64.deb
    register: dpkg_output
  - name: output from dpkg
    ansible.builtin.debug:
      msg: "{{ dpkg_output.stdout_lines }}"

  - name: run dpkg -i linux-modules
    ansible.builtin.shell:
      chdir: /tmp/kernels
      cmd: dpkg -i linux-modules_arm64.deb
    register: dpkg_output
  - name: output from dpkg
    ansible.builtin.debug:
      msg: "{{ dpkg_output.stdout_lines }}"

  - name: run dpkg -i linux-modules-extra
    ansible.builtin.shell:
      chdir: /tmp/kernels
      cmd: dpkg -i linux-modules-extra_arm64.deb
    register: dpkg_output
  - name: output from dpkg
    ansible.builtin.debug:
      msg: "{{ dpkg_output.stdout_lines }}"

  - name: Run depmod
    ansible.builtin.shell:
      cmd: depmod
    register: depmod_output
  - name: output from depmod
    ansible.builtin.debug:
      msg: "{{ depmod_output.stdout_lines }}"

  - name: reboot
    reboot:
      msg: "Rebooting after ansible updates"
      pre_reboot_delay: 1
  - name: ls -la /sys/kernel/btf/vmlinux
    ansible.builtin.shell:
      cmd: ls -la /sys/kernel/btf/vmlinux
    register: ls_output
  - name: output from ls
    ansible.builtin.debug:
      var: "ls_output.stdout_lines"
  - name: lsmod | grep vxlan
    ansible.builtin.shell:
      cmd: lsmod | grep vxlan
    register: lsmod_output
  - name: output from lsmod
    ansible.builtin.debug:
      var: "lsmod_output.stdout_lines"
